#!/usr/bin/python2
import re
import sys
import os
import stat
#import uuid

#
# Author: Matthew E. Boyce
# Purpose: To copy the directory tree of templatized project files
#          which are used to start a new PLASMA project.

if os.environ.has_key("EUROPA_HOME"):
  europaHome = os.environ["EUROPA_HOME"]
else:
  print "Error: EUROPA_HOME is not defined"
  sys.exit(1)

if len(sys.argv) < 2:
  print "Expected use: " + sys.argv[0] + " <projectName> <projectDest - optional>"
  print "  (if no projectDest specified, EUROPA_HOME/../ is used)"
  sys.exit(1);

projectName = sys.argv[1]
projectSource = os.path.join(europaHome, "bin", ".makeproject")
configDir = os.path.join(europaHome, "config")
#guid = str(uuid.uuid1())
guid = 'DAF2E254-AA1F-4821-897A-D6B9C7012E09'
#randId1 = str(uuid.uuid4())
#randId2 = str(uuid.uuid4())
#randId3 = str(uuid.uuid4())
#randId4 = str(uuid.uuid4())
randId1 = '8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942'
randId2 = '24b7adc7-6f30-4aea-b08b-c0957e21cfb2'
randId3 = 'd9af6b09-64bd-4173-84af-4269d9a021fd'
randId4 = '0e378145-e0a9-4c4f-b745-3df589c553e6'

if len(sys.argv) > 2:
  projectDest = os.path.join(sys.argv[2], projectName)
else:
  projectDest = os.path.join(europaHome, "..", projectName)

if os.path.exists(projectDest):
  print "Error: " + projectDest + " already exists!"
  sys.exit(1)

def detemplate (string, isFilename):
  toret = string
  if isFilename:
    toret = re.sub("Template", projectName, toret)
    toret = re.sub("TEMPLATE", projectName.upper(), toret)
    toret = re.sub("template", projectName.lower(), toret)
  else:
    toret = re.sub("%%Project%%", projectName, toret)
    toret = re.sub("%%PROJECT%%", projectName.upper(), toret)
    toret = re.sub("%%project%%", projectName.lower(), toret)
    toret = re.sub("%%GUID%%", guid, toret)
    toret = re.sub("%%RANDUID1%%", randId1, toret)
    toret = re.sub("%%RANDUID2%%", randId2, toret)
    toret = re.sub("%%RANDUID3%%", randId3, toret)
    toret = re.sub("%%RANDUID4%%", randId4, toret)
  return toret

def copytemplate (source, dest, isDir):
  if isDir:
    os.makedirs(dest, 0755)
  else:
    destfile = open(dest, "w")
    for line in open(source, "r").readlines():
      destfile.write(detemplate(line, False))

def copytree (sourcedir, destdir):
  ignore = ['.svn']
  names = os.listdir(sourcedir)
  for name in names:
    if (name in ignore):
        continue
    source = os.path.join(sourcedir, name)
    dest = os.path.join(destdir, detemplate(name, True))
    try:
      st = os.lstat(source)
    except os.error:
      continue
    if stat.S_ISDIR(st.st_mode):
      copytemplate(source, dest, True)
      copytree (source, dest)
    else:
      copytemplate(source, dest, False)

os.makedirs(projectDest, 0755)
copytree(projectSource, projectDest)
copytree(configDir, projectDest)
